"""
Word Document (.docx) Export Utilities
Handles exporting OCR data to Microsoft Word format
"""

from docx import Document
from docx.shared import Inches, Pt, RGBColor
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.oxml.ns import qn
from docx.oxml import OxmlElement
from datetime import datetime
import os


class DocxExporter:
    """Export OCR results to Word documents"""
    
    def __init__(self):
        self.default_font = 'Calibri'
        self.default_font_size = 11
        self.heading_font_size = 14
    
    def export_plain_text_to_docx(self, text, output_path, title="Document", metadata=None):
        """
        Export plain text to a Word document
        
        Args:
            text: The text content to export
            output_path: Path where the .docx file will be saved
            title: Document title
            metadata: Optional dictionary with metadata (confidence, date, etc.)
        
        Returns:
            Path to the created Word document
        """
        try:
            # Create a new Document
            doc = Document()
            
            # Set document properties
            core_properties = doc.core_properties
            core_properties.title = title
            core_properties.author = "OCR Application"
            core_properties.comments = "Generated by OCR Application"
            
            # Add title
            title_paragraph = doc.add_heading(title, level=0)
            title_paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER
            
            # Add metadata if provided
            if metadata:
                doc.add_paragraph()  # Spacing
                
                # Create a table for metadata
                metadata_table = doc.add_table(rows=0, cols=2)
                metadata_table.style = 'Light Grid Accent 1'
                
                for key, value in metadata.items():
                    row_cells = metadata_table.add_row().cells
                    row_cells[0].text = str(key)
                    row_cells[1].text = str(value)
                    
                    # Make key bold
                    row_cells[0].paragraphs[0].runs[0].bold = True
                
                doc.add_paragraph()  # Spacing
            
            # Add a separator
            doc.add_paragraph('_' * 80)
            doc.add_paragraph()
            
            # Add the main text content
            # Split by paragraphs to preserve formatting
            paragraphs = text.split('\n')
            for para_text in paragraphs:
                if para_text.strip():  # Skip empty lines
                    p = doc.add_paragraph(para_text)
                    # Set font
                    for run in p.runs:
                        run.font.name = self.default_font
                        run.font.size = Pt(self.default_font_size)
                else:
                    doc.add_paragraph()  # Add blank line
            
            # Add footer with generation date
            section = doc.sections[0]
            footer = section.footer
            footer_para = footer.paragraphs[0]
            footer_para.text = f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            footer_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
            
            # Save the document
            doc.save(output_path)
            return output_path
            
        except Exception as e:
            raise Exception(f"Error creating Word document: {str(e)}")
    
    def export_template_data_to_docx(self, document, template, output_path):
        """
        Export structured template data to a formatted Word document
        
        Args:
            document: Document model instance with extracted data
            template: Template model instance
            output_path: Path where the .docx file will be saved
        
        Returns:
            Path to the created Word document
        """
        try:
            # Create a new Document
            doc = Document()
            
            # Set document properties
            core_properties = doc.core_properties
            core_properties.title = document.name
            core_properties.author = "OCR Application"
            
            # Add document title
            title = doc.add_heading(document.name, level=0)
            title.alignment = WD_ALIGN_PARAGRAPH.CENTER
            
            # Add document info section
            doc.add_paragraph()
            info_table = doc.add_table(rows=3, cols=2)
            info_table.style = 'Light Grid Accent 1'
            
            # Template name
            info_table.rows[0].cells[0].text = "Template"
            info_table.rows[0].cells[1].text = template.name
            info_table.rows[0].cells[0].paragraphs[0].runs[0].bold = True
            
            # Processing date
            info_table.rows[1].cells[0].text = "Processed"
            info_table.rows[1].cells[1].text = document.created_at.strftime('%Y-%m-%d %H:%M:%S')
            info_table.rows[1].cells[0].paragraphs[0].runs[0].bold = True
            
            # Status
            info_table.rows[2].cells[0].text = "Status"
            info_table.rows[2].cells[1].text = document.get_processing_status_display()
            info_table.rows[2].cells[0].paragraphs[0].runs[0].bold = True
            
            # Add separator
            doc.add_paragraph()
            doc.add_heading('Extracted Data', level=1)
            
            # Extract fields from document data
            extracted_data = document.extracted_data
            
            if 'fields' in extracted_data:
                # Template-based format with fields
                self._add_fields_table(doc, extracted_data['fields'])
            
            elif 'cells' in extracted_data:
                # Table detection format
                self._add_cells_table(doc, extracted_data)
            
            else:
                # Fallback - plain text
                text = extracted_data.get('text', 'No data extracted')
                doc.add_paragraph(text)
            
            # Add confidence score if available
            if document.confidence_score:
                doc.add_paragraph()
                confidence_para = doc.add_paragraph()
                confidence_para.add_run(f"Overall Confidence Score: ").bold = True
                confidence_para.add_run(f"{document.confidence_score:.1f}%")
            
            # Add footer
            section = doc.sections[0]
            footer = section.footer
            footer_para = footer.paragraphs[0]
            footer_para.text = f"Generated by OCR Application - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            footer_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
            
            # Save the document
            doc.save(output_path)
            return output_path
            
        except Exception as e:
            raise Exception(f"Error creating Word document from template: {str(e)}")
    
    def _add_fields_table(self, doc, fields):
        """Add a table with field names and values"""
        if not fields:
            doc.add_paragraph("No fields extracted.")
            return
        
        # Create table with headers
        table = doc.add_table(rows=1, cols=3)
        table.style = 'Light Grid Accent 1'
        
        # Set headers
        header_cells = table.rows[0].cells
        header_cells[0].text = "Field Name"
        header_cells[1].text = "Value"
        header_cells[2].text = "Confidence"
        
        # Make headers bold
        for cell in header_cells:
            for paragraph in cell.paragraphs:
                for run in paragraph.runs:
                    run.bold = True
        
        # Add data rows
        for field in fields:
            row_cells = table.add_row().cells
            row_cells[0].text = field.get('name', '')
            row_cells[1].text = str(field.get('value', ''))
            
            confidence = field.get('confidence', 0)
            row_cells[2].text = f"{confidence:.1f}%" if confidence else "N/A"
    
    def _add_cells_table(self, doc, extracted_data):
        """Add a table from cell-based extraction"""
        cells = extracted_data.get('cells', [])
        rows_count = extracted_data.get('rows', 0)
        cols_count = extracted_data.get('cols', 0)
        
        if not cells or rows_count == 0 or cols_count == 0:
            doc.add_paragraph("No table data extracted.")
            return
        
        # Create table structure
        table = doc.add_table(rows=rows_count, cols=cols_count)
        table.style = 'Light Grid Accent 1'
        
        # Fill table cells
        for cell_data in cells:
            row = cell_data.get('row', 0)
            col = cell_data.get('col', 0)
            text = cell_data.get('text', '')
            
            if row < rows_count and col < cols_count:
                table.rows[row].cells[col].text = text
                
                # Make first row (headers) bold
                if row == 0:
                    for paragraph in table.rows[row].cells[col].paragraphs:
                        for run in paragraph.runs:
                            run.bold = True
    
    def export_multiple_documents_to_docx(self, documents, template, output_path):
        """
        Export multiple documents into a single Word file with consolidated data
        
        Args:
            documents: List of Document model instances
            template: Template model instance
            output_path: Path where the .docx file will be saved
        
        Returns:
            Path to the created Word document
        """
        try:
            # Create a new Document
            doc = Document()
            
            # Set document properties
            core_properties = doc.core_properties
            core_properties.title = f"{template.name} - Consolidated Report"
            core_properties.author = "OCR Application"
            
            # Add title
            title = doc.add_heading(f"Consolidated Report: {template.name}", level=0)
            title.alignment = WD_ALIGN_PARAGRAPH.CENTER
            
            # Add summary info
            doc.add_paragraph()
            summary_para = doc.add_paragraph()
            summary_para.add_run("Total Documents: ").bold = True
            summary_para.add_run(str(len(documents)))
            summary_para = doc.add_paragraph()
            summary_para.add_run("Generated: ").bold = True
            summary_para.add_run(datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
            
            # Add separator
            doc.add_paragraph('_' * 80)
            
            # Get field names from template
            field_names = template.get_field_names()
            
            if field_names:
                # Create consolidated table
                doc.add_heading('Extracted Data Summary', level=1)
                
                # Create table
                table = doc.add_table(rows=1, cols=len(field_names) + 1)
                table.style = 'Light Grid Accent 1'
                
                # Set headers
                header_cells = table.rows[0].cells
                header_cells[0].text = "Document"
                for i, field_name in enumerate(field_names):
                    header_cells[i + 1].text = field_name
                
                # Make headers bold
                for cell in header_cells:
                    for paragraph in cell.paragraphs:
                        for run in paragraph.runs:
                            run.bold = True
                
                # Add data rows
                for doc_obj in documents:
                    row_cells = table.add_row().cells
                    row_cells[0].text = doc_obj.name
                    
                    # Extract field values
                    extracted_data = doc_obj.extracted_data
                    
                    if 'fields' in extracted_data:
                        for i, field in enumerate(extracted_data['fields']):
                            if i < len(field_names):
                                row_cells[i + 1].text = str(field.get('value', ''))
                    
                    elif 'cells' in extracted_data:
                        # Table format - extract ALL data rows (skip header row 0)
                        # For consolidated view, add multiple rows for documents with multiple data rows
                        cells = extracted_data['cells']
                        # Group cells by row
                        cell_rows = {}
                        for cell_data in cells:
                            cell_row = cell_data.get('row', 0)
                            col = cell_data.get('col', 0)
                            text = cell_data.get('text', '')
                            if cell_row not in cell_rows:
                                cell_rows[cell_row] = {}
                            cell_rows[cell_row][col] = text
                        
                        # Add a row for each data row in the table (skip header at row 0)
                        first_row = True
                        for data_row_idx in sorted(cell_rows.keys()):
                            if data_row_idx > 0:  # Skip header row
                                if not first_row:
                                    # Add new row for additional data rows
                                    row_cells = table.add_row().cells
                                    row_cells[0].text = doc_obj.name  # Repeat document name
                                
                                # Fill columns
                                for col_idx in range(len(field_names)):
                                    if col_idx in cell_rows[data_row_idx]:
                                        row_cells[col_idx + 1].text = cell_rows[data_row_idx][col_idx]
                                
                                first_row = False
            
            # Add page break and individual document details
            doc.add_page_break()
            doc.add_heading('Individual Document Details', level=1)
            
            for i, doc_obj in enumerate(documents, 1):
                doc.add_heading(f"{i}. {doc_obj.name}", level=2)
                
                extracted_data = doc_obj.extracted_data
                
                if 'fields' in extracted_data:
                    self._add_fields_table(doc, extracted_data['fields'])
                elif 'cells' in extracted_data:
                    self._add_cells_table(doc, extracted_data)
                
                # Add spacing between documents
                if i < len(documents):
                    doc.add_paragraph()
                    doc.add_paragraph('_' * 80)
                    doc.add_paragraph()
            
            # Add footer
            section = doc.sections[0]
            footer = section.footer
            footer_para = footer.paragraphs[0]
            footer_para.text = f"Generated by OCR Application - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            footer_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
            
            # Save the document
            doc.save(output_path)
            return output_path
            
        except Exception as e:
            raise Exception(f"Error creating consolidated Word document: {str(e)}")
